<?php
/**
 * @file
 * Code for the wfs_common module.
 */

/**
 * Implements hook_menu_alter().
 */
function wfs_common_menu_alter(&$items) {
  $items['node']['page callback'] = 'wfs_common_empty_front_page_callback';
}

/**
 * Implements hook_language_switch_links_alter().
 */
function wfs_common_empty_front_page_callback() {
  drupal_set_title('');
  return array();
}

/**
 * Custom submit handler.
 */
function wfs_common_language_switch_links_alter(array &$links, $type, $path) {
  if (isset($links['en']['title'])) {
    $links['en']['title'] = 'en';
  }
  if (isset($links['zh-hant']['title'])) {
    $links['zh-hant']['title'] = '中文';
  }
}

/**
 * Implements hook_theme().
 */
function wfs_common_theme() {
  $theme = array();

  $base = array(
    'path' => drupal_get_path('module', 'wfs_common') . '/theme',
  );

  $theme['wfs_common_add_this_button'] = array(
    'template' => 'wfs-common-add-this-button',
    'variables' => array(),
  ) + $base;

  return $theme;
}

/**
 * Implements hook_menu().
 */
function wfs_common_menu() {

  $items['page-404'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('Page not found'),
    'page callback' => 'wfs_common_special_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  $items['page-403'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('403 Forbidden'),
    'page callback' => 'wfs_common_special_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  $items['export-winery/%'] = array(
    'title' => 'Export winery',
    'page callback' => 'wfs_common_export_winery',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'file' => 'wfs_common.admin.inc',
    'file path' => drupal_get_path('module', 'wfs_common') . '/includes',
  );

  return $items;
}

/**
 * Page callback.
 */
function wfs_common_special_page() {
  return '';
}

/**
* Implementation of hook_form_alter()
*/
function wfs_common_form_alter(&$form, &$form_state, $form_id) {
  // Change FC add new item labels.
  if (!empty($form['field_fc_importers_contacts'][LANGUAGE_NONE]['add_more']['#value'])) {
    $form['field_fc_importers_contacts'][LANGUAGE_NONE]['add_more']['#value'] = t('Add importer');
  }
  if (!empty($form['field_fc_brands'][LANGUAGE_NONE]['add_more']['#value'])) {
    $form['field_fc_brands'][LANGUAGE_NONE]['add_more']['#value'] = t('Add brand');
  }

  // Add placeholder for Search
  if ($form_id == 'search_block_form') {
    $form['search_block_form']['#attributes']['placeholder'] = t('Search');
  }

  if ($form_id == 'menu_edit_item') {
    // Field QR code only for WeChat.
    if ($form['link_title']['#default_value'] != 'WeChat') {
      unset($form['menu_fields']['fields']['qr_code']);
    }
  }

  if ($form_id == 'bean_form') {
    // Access FALSE.
    $form['title']['#access'] = 
    $form['view_mode']['#access'] = 
    $form['revision']['#access'] = 
    $form['revision']['is_new_revision']['#default_value'] = FALSE;
  }

  if ($form_id == 'views_exposed_form') {
    $form['#attached']['js'][] = array(
      'type' => 'file',
      'data' => drupal_get_path('module','wfs_common') . '/js/wfs_common_exposed_filters.js',
    );

    // Events view.
    if ($form['#id'] == 'views-exposed-form-events-page') {
      $query = drupal_get_query_parameters();
      $query['show'] = 'blocks';
      unset($query['page']);

      $options = array(
        'query' => $query
      );

      $form['#prefix'] = '<div class="show-type">';
      $form['#prefix'] .= '<a href="' . url('events', $options) . '" class="blocks"></a>';
      $options['query']['show'] = 'list';
      $form['#prefix'] .= '<a href="' . url('events', $options) . '" class="list"></a>';
      $form['#prefix'] .= '</div>';

      $form['show'] = array(
        '#type' => 'hidden',
        '#default_value' => empty($_GET['show']) ? '' : $_GET['show']
      );

      // Create custom date filter.
      drupal_add_css('#edit-date-filter-wrapper { display: none }', array('type' => 'inline'));

      $month_names = date_month_names();
      // $range_years = date_range_years($form['date_filter']['value']['#date_year_range']);
      // $range_years_all = array();
      // for ($i= $range_years[0]; $i <= $range_years[1]; $i++) { 
      //   $range_years_all[] = $i;
      // }
      $date_filter_custom_ops = array(
        'All' => t('Year-Month') //t($form['#info']['filter-date_filter']['label'])
      );

      // Do task:
      // Can we have something automatic that adds the month/year of the events in the menu? 
      // Meaning if no event for one month, this month is not showing.
      global $language;

      $query = db_select('node', 'n');
      $query->innerJoin('field_data_field_date', 'fd', 'fd.entity_id = n.nid');
      $query->fields('fd', array('field_date_value'));
      $query->condition('n.type', array('event', 'official_event', 'do_event'), 'IN');
      $query->condition('n.status', 1);
      $query->condition('n.language', $language->language);
      $query->orderBy('fd.field_date_value', 'ASC');
      $events = $query->execute()->fetchAll();

      if (!empty($events)) {
        foreach ($events as $key => $value) {
          $date = strtotime($value->field_date_value);

          $year = date('Y', $date);
          $month = date('n', $date);

          $date_filter_custom_ops[$month . '_' . $year] = $year . '-' . $month_names[$month];
        }
      }

      // foreach ($range_years_all as $key_year => $year) {
      //   foreach ($month_names as $key_month => $month) {
      //     if (!empty($key_month)) {
      //       // Do task:
      //       // Event date menu: remove everything before 2018.11.
      //       if ($year == 2018 && $key_month < 11) {
      //         # code...
      //       }
      //       // Add date option.
      //       else  {
      //         $date_filter_custom_ops[$key_month . '_' . $year] = $year . '-' . $month;
      //       }
      //     }
      //   }
      // }
      $form['date_filter_custom'] = array(
        '#type' => 'select', 
        '#options' => $date_filter_custom_ops
      );

      // Create widget from new form item and place it as a second element.
      $new_form_info = array(
        'filter-field_province_text_value' => $form['#info']['filter-field_province_text_value'],
        'filter-date_filter_custom' => array('value' => 'date_filter_custom'),
        'filter-field_category_tid' => $form['#info']['filter-field_category_tid'],
        'filter-field_type_tid' => $form['#info']['filter-field_type_tid'],
        'filter-title' => $form['#info']['filter-title']
      );
      $diff = wfs_common_array_recursive_diff($form['#info'], $new_form_info);
      $form['#info'] = array_merge($new_form_info, $diff);
    }

    // 70 Designations of Origin view.
    if ($form['#id'] == 'views-exposed-form-70-designations-of-origin-block') {
      global $language;
      ctools_include('wfs_common.help', 'wfs_common');

      $letters['All'] = t('A-Z');
      foreach (range('a', 'z') as $letter) {
        // if ($language->language == 'en') {
          $letters[$letter] = strtoupper($letter);
        // }
        // else {
        //   $ch_letter = wfs_common_get_chinese_letter_by_en($letter);
        //   $letters[$ch_letter] = strtoupper($ch_letter);
        // }
      }

      $form['a_z'] = array(
        '#type' => 'select',
        '#options' => $letters,
        '#weight' => -1
      );

      // Create widget from new form item and place it as a second element.
      $new_form_info = array(
        'filter-a_z' => array('value' => 'a_z'),
        'filter-title' => $form['#info']['filter-title']
      );
      $diff = wfs_common_array_recursive_diff($form['#info'], $new_form_info);
      $form['#info'] = array_merge($new_form_info, $diff);

      drupal_add_css('#edit-title-1-wrapper { display: none }', array('type' => 'inline'));
    }

    // Events exposed filters.
    $filters = array(
      'field_category_tid',
      'field_province_text_value',
      'field_type_tid',
      'title',
      'field_title_value',
      'field_do_tid',
    );

    // Set placeholders.
    foreach ($filters as $key => $filter) {
      $info_data = 'filter-' . $filter;

      if (isset($form[$filter]['#type']) && $form[$filter]['#type'] == 'select') {
        $form[$filter]['#options']['All'] = $form['#info'][$info_data]['label'];
      }
      else if (isset($form[$filter]['#type']) && $form[$filter]['#type'] == 'textfield') {
        $form[$filter]['#attributes']['placeholder'] = $form['#info'][$info_data]['label'];
      }
      
      if (isset($form['#info'][$info_data]['label'])) {
        unset($form['#info'][$info_data]['label']);
      }
    }
  }

  if (in_array($form_id, array('webform_client_form_5', 'webform_client_form_72'))) {
    $form['#validate'][] = 'wfs_common_webform_client_form_validate';
  }

  if ($form_id == 'system_site_information_settings') {
    $form['map_pdf_en_fid'] = array(
      '#title' => t('Map PDF') . ' (EN)',
      '#type' => 'managed_file',
      '#description' => t('PDF file for download from map page.'),
      '#default_value' => variable_get('map_pdf_en_fid', ''),
      '#upload_location' => 'public://map-pdf/',
    );
    $form['map_pdf_ch_fid'] = array(
      '#title' => t('Map PDF') . ' (CN)',
      '#type' => 'managed_file',
      '#description' => t('PDF file for download from map page.'),
      '#default_value' => variable_get('map_pdf_ch_fid', ''),
      '#upload_location' => 'public://map-pdf/',
    );

    $form['#submit'][] = 'wfs_common_system_site_information_settings_form_submit';

    return system_settings_form($form);
  }

  if ($form_id == 'user_profile_form') {
    $form['#attached']['css'][] = array(
      'type' => 'file',
      'data' => libraries_get_path('intl-tel-input') . '/build/css/intlTelInput.min.css',
    );
    $form['#attached']['js'][] = array(
      'type' => 'file',
      'data' => libraries_get_path('intl-tel-input') . '/build/js/intlTelInput.min.js',
    );
    $form['#attached']['js'][] = array(
      'type' => 'file',
      'data' => libraries_get_path('intl-tel-input') . '/build/js/utils.js',
    );

    // drupal_add_css(libraries_get_path('intl-tel-input') . '/build/css/intlTelInput.min.css', array('type' => 'file'));
    // drupal_add_js(libraries_get_path('intl-tel-input') . '/build/js/intlTelInput.js', array('type' => 'file', 'scope' => 'footer'));
    // drupal_add_js(libraries_get_path('intl-tel-input') . '/build/js/utils.js', array('type' => 'file', 'scope' => 'footer'));
    drupal_add_js('jQuery(document).ready(function () { 
      var input = document.querySelector("#edit-field-phone-und-0-value");
      window.intlTelInput(input, {
        customPlaceholder: function(selectedCountryPlaceholder, selectedCountryData) {
          return "";
        },
        // nationalMode: true,
        formatOnDisplay: true,
        onlyCountries: ["es", "cn"],
      });
    });', array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 5,
    ));
  }
}

function wfs_common_system_site_information_settings_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['map_pdf_en_fid'])) {
    $file = file_load($form_state['values']['map_pdf_en_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'wfs_common', 'wfs_common', $file->fid);
  }
  if (!empty($form_state['values']['map_pdf_ch_fid'])) {
    $file = file_load($form_state['values']['map_pdf_ch_fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, 'wfs_common', 'wfs_common', $file->fid);
  }
}

/**
 * Custom validation for webform.
 *
 */
function wfs_common_webform_client_form_validate($form, &$form_state) {
  if (strlen($form_state['values']['submitted']['name']) < 3 || strlen($form_state['values']['submitted']['name']) > 50) {
    form_set_error('submitted[name]', t('Name need contain from 3 to 50 symbols.'));
  }

  $clean_code = preg_replace('/[^a-zA-Z0-9]/', '', $form_state['values']['submitted']['name']);
  if (strlen($clean_code) != strlen($form_state['values']['submitted']['name'])) {
    form_set_error('submitted[name]', t('Name need contain letters or numbers.'));
  }
}

/**
 * Array recursive diff.
 *
 * @param array $aArray1
 * @param array $aArray2
 */
function wfs_common_array_recursive_diff($aArray1, $aArray2) {
  $aReturn = array();

  foreach ($aArray1 as $mKey => $mValue) {
    if (array_key_exists($mKey, $aArray2)) {
      if (is_array($mValue)) {
        $aRecursiveDiff = wfs_common_array_recursive_diff($mValue, $aArray2[$mKey]);
        if (count($aRecursiveDiff)) { $aReturn[$mKey] = $aRecursiveDiff; }
      } else {
        if ($mValue != $aArray2[$mKey]) {
          $aReturn[$mKey] = $mValue;
        }
      }
    } else {
      $aReturn[$mKey] = $mValue;
    }
  }
  return $aReturn;
} 

/**
 * Implements hook_TYPE_alter().
 *
 * @param array $options
 *   $options contains an array with configurations settings for used in the
 *   creation of the markup. The following elements may be in here.
 *
 *   - '#entity_type': The entity type this markup is define when called by a
 *                     field.
 *   - '#entity': Is the entity object when called by a field.
 *   - '#display': Is always defined and provide all the formatter
 *                 configuration.
 *   - '#url': The link to the entity when the entity has a url.
 */
function wfs_common_addthis_markup_options_alter(&$options) {
  if (!empty($options['#entity']->field_link[LANGUAGE_NONE][0]['url'])) {
    $options['#url'] = $options['#entity']->field_link[LANGUAGE_NONE][0]['url'];
  }

  // Change share url for newsletters.
  if (!empty($options['#entity']->type) && $options['#entity']->type == 'newsletter_detail') {
    $options['#url'] = empty($options['#entity']->field_file[LANGUAGE_NONE][0]['uri']) ? $options['#url'] : file_create_url($options['#entity']->field_file[LANGUAGE_NONE][0]['uri']);
  }
}

/**
 * Implements hook_TYPE_alter().
 *
 * @param array $markup
 *   $markup contains an array with the structure of the addthis markup.
 */
function wfs_common_addthis_markup_alter(&$markup) {
  // Change share button template.
  $markup[0] = theme('wfs_common_add_this_button');
}

/**
 * Implements hook_entity_view_alter().
 */
function wfs_common_entity_view_alter(&$build, $type) {
  if ($type == 'paragraphs_item' && !isset($build['field_link']) && isset($build['field_share'])) {
    $build['field_share']['#access'] = FALSE;
  }
}

/**
 * Implements hook_page_alter().
 */
function wfs_common_page_alter(&$page) {
  drupal_add_js(drupal_get_path('module', 'wfs_common') . '/js/wfs_common.js', array('type' => 'file', 'scope' => 'footer'));
  drupal_add_js(drupal_get_path('module', 'wfs_common') . '/js/wfs_common_load_images.js', array('type' => 'file', 'scope' => 'footer'));

  drupal_add_css(drupal_get_path('module', 'wfs_common') . '/css/wfs_common.css', array('type' => 'file', 'scope' => 'footer'));
}

/**
 * Implements hook_cron().
 */
function wfs_common_cron() {
  ctools_include('wfs_common.help', 'wfs_common');
  // Parse from youku.
  wfs_common_youku_parse();
  
  // // Update events stiky.
  // wfs_common_update_events();
}

/**
 * Implements hook_preprocess_html().
 */
function wfs_common_preprocess_html(&$variables) {
  global $user;

  if (!empty($user->roles[5])) {
    $variables['classes_array'][] = 'user-role-registered';
  }
}

/**
 * Implements hook_views_pre_build ()
 */
function wfs_common_views_pre_build(&$view) {
  if ($view->name == 'events' 
    && $view->current_display == 'page' 
    && !empty($_GET['show']) 
    && $_GET['show'] == 'list') {
    $view->items_per_page = 11;
    $view->display_handler->set_option('css_class', 'show-type-list');
  }
}

/**
 * Implements hook_node_submit().
 */
function wfs_common_node_submit($node, $form, &$form_state) {
  if (in_array($node->type, array('event', 'official_event', 'do_event'))) {
    ctools_include('wfs_common.help', 'wfs_common');

    $event_date = $node->field_date[LANGUAGE_NONE][0]['value'];

    if ((wfs_common_compare_dates($event_date, date("Y-m-d 00:00:00")) <= 0) && !$node->sticky) {
      $node->sticky = 1;
    }
    elseif ((wfs_common_compare_dates($event_date, date("Y-m-d 00:00:00")) > 0) && $event->sticky) {
      $node->sticky = 0;
    }
  }
}
